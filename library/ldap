#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Ansible module to configure ldap.
(c) 2014, Mark Stillwell <marklee@fortawesome.org>

This file is part of Ansible

Ansible is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Ansible is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
"""

DOCUMENTATION = '''
---
module: ldap
short_description: add, update, or delete an ldap entry
description:
     - use this module to add, update, or delete an ldap entry
version_added: "1.6"
notes:
    - This module requires the command line ldap utilities.
options:
  name:
  ldap_uri:
      - uri for ldap server
    required: false
    default: ldapi:///
    aliases: []
  use_tls:
      - whether the connection should use tls to secure the connection
      required: false
      default: 'smart'
      choices: [ 'yes', 'no', 'smart' ]
      aliases: []
  bind_dn:
    description:
      - dn to use to bind to ldap server
    required: false
    default: null
    aliases: []
  bind_password:
    description:
      - password to use to bind
    required: false
    default: null
    aliases: []
  entry_dn:
    description:
      - entry distinguished name
    required: true
    default: null
    aliases: []
  search_base:
    description:
      - base to use when searching instead of looking up dn directory
    required: false
    default: null
    aliases: []
  search_filter:
    description:
      - filter to use when searching instead of looking up dn directory
    required: false
    default: null
    aliases: []
  attributes:
    description:
      - list of attribute names or dictionaries giving key-value pairs
    required: false
    default: []
    aliases: []
  strip_braces:
      - whether or not to strip braces and braced text from returned attribute values
      required: false
      default: False
      aliases: []
  modify_action:
      - default action to perform against matching attributes
      required: false
      default: 'add'
      choices: [ 'add', 'replace', 'delete' ]
      aliases: []
  state:
    description:
      - desired state of ldap entry
    required: false
    default: 'present'
    choices: [ 'present', 'absent' ]
    aliases: []
author: Mark Stillwell

'''

EXAMPLES = '''

- name: ensure ssl is configured in ldap if certificates are available
  ldap:
    entry_dn: cn=config
    attributes:
      - olcTLSCipherSuite: "{{ slapd_ssl_cipher_suite }}"
      - olcTLSCACertificateFile: "{{ slapd_ssl_ca_cert_file }}"
      - olcTLSCertificateFile: "{{ slapd_ssl_cert_file }}"
      - olcTLSCertificateKeyFile: "{{ slapd_ssl_key_file }}"
    state: present
  when: slapd_ssl_cert_file != "" and slapd_ssl_key_file != ""

- name: ensure ldap membership overlay module is enabled
  ldap:
    entry_dn: cn=module,cn=config
    search_base: cn=config
    search_filter: '(olcModuleLoad~=memberof.la)'
    strip_braces: yes
    attributes:
      - cn: module
      - objectClass: top
      - objectClass: olcModuleList
      - olcModuleLoad: memberof.la
      - olcModulePath: /usr/lib/ldap
    state: present
 
- name: ensure expected organizational units are present in ldap
  ldap:
    bind_dn: cn=admin,{{ ldap_base_dn }}
    bind_password: "{{ ldap_admin_password }}"
    entry_dn: ou={{ item }},{{ ldap_base_dn }}
    attributes:
      - objectClass: organizationalUnit
      - ou: "{{ item }}"
    state: present
 
'''

def _get_entry(module, cmdparams, entry_dn, search_base, search_filter, 
               strip_braces):
    ''' get entry from ldap and return a dictionary '''

    cmd = [module.get_bin_path('ldapsearch', True)] + cmdparams
    cmd += ['-LLL', '-o', 'ldif-wrap=no']

    if search_base and search_filter:
        cmd += ['-b', search_base, search_filter]
    elif entry_dn:
        cmd += ['-b', entry_dn, '-s', 'base']
    else:
        module.fail_json(msg='either entry_dn or search_base and search_filter must be specified')

    rc, out, err = module.run_command(cmd)

    # not found
    if rc == 32:
        return None

    if rc != 0:
        module.fail_json(msg=err)

    attributes = set(tuple(x.strip() for x in line.split(':', 1)) 
                     for line in out.splitlines() if line.strip() != "")

    # a successful search should return at least a dn
    if not attributes:
        return None

    if attributes and strip_braces:
        import re
        attributes = set(tuple(re.sub('{.*}', '', x) for x in a) 
                         for a in attributes)

    return attributes

def _add_entry(module, cmdparams, entry_dn, attributes):
    ''' add an entry to ldap '''
    import pipes

    ldif = 'dn: {}\n'.format(entry_dn)
    ldif += '\n'.join('{}: {}'.format(*a) for a in attributes)

    cmd = ' '.join(["echo", pipes.quote(ldif), "|", 
                   module.get_bin_path('ldapadd', True)] + cmdparams)

    rc, out, err = module.run_command(cmd, use_unsafe_shell=True)

    if rc != 0:
        module.fail_json(msg=err)

    return


def _modify_entry(module, cmdparams, entry_dn, attrpairs, attrnames, 
                  modify_action):
    ''' update an entry in ldap '''
    import itertools, pipes

    changes = ['\n'.join(["{}: {}".format(modify_action, k)] + 
                         ["{}: {}".format(*a) for a in g])
               for k, g in itertools.groupby(sorted(list(attrpairs)), 
                                             lambda a: a[0])]
    changes += ["{}: {}".format(modify_action, a) for a in attrnames]

    ldif = 'dn: {}\nchangetype: modify\n'.format(entry_dn) 
    ldif += '\n-\n'.join(changes)

    module.fail_json(msg=ldif)

    cmd = ' '.join(["echo", pipes.quote(ldif), "|", 
                   module.get_bin_path('ldapmodify', True)] + cmdparams)

    rc, out, err = module.run_command(cmd, use_unsafe_shell=True)

    if rc != 0:
        module.fail_json(msg=err)

    return


def _delete_entry(module, cmdparams, entry_dn):
    ''' delete an entry in ldap and return empty '''
    cmd = [module.get_bin_path('ldapdelete', True)] + cmdparams
    cmd += [entry_dn]

    rc, out, err = module.run_command(cmd)

    if rc != 0:
        module.fail_json(msg=err)

    return 


def main():
    ''' main function '''

    module = AnsibleModule(
        argument_spec = dict(
            ldap_uri = dict(type='str', default='ldapi:///'),
            use_tls = dict(type='str', choices=['yes', 'no', 'smart'], 
                           default='smart'),
            bind_dn = dict(type='str'),
            bind_password = dict(type='str'),
            entry_dn = dict(type='str'),
            search_base = dict(type='str'),
            search_filter = dict(type='str'),
            strip_braces = dict(type='bool', default=False),
            attributes = dict(type='list', default=[]),
            modify_action = dict(type='str', 
                                 choices=['add', 'replace', 'delete'], 
                                 default='add'),
            state = dict(type='str', choices=['present', 'absent'], 
                         default='present')
        ),
        supports_check_mode=True,
    )

    ldap_uri = module.params['ldap_uri']
    use_tls = module.params['use_tls']
    bind_dn = module.params['bind_dn']
    bind_password = module.params['bind_password']

    cmdparams = ['-H', ldap_uri]

    if bind_dn is not None:
        cmdparams += ['-D', bind_dn]

    if bind_password is not None:
        cmdparams += ['-w', bind_password]
    elif ldap_uri == "ldapi:///" :
        cmdparams += ['-QY', 'EXTERNAL']

    if use_tls == 'yes' or (use_tls == 'smart' and ldap_uri != 'ldapi:///'):
        cmdparams += ['-ZZ']

    entry_dn = module.params['entry_dn']
    search_base = module.params['search_base']
    search_filter = module.params['search_filter']
    state = module.params['state']

    strip_braces = module.params['strip_braces']

    attrpairs = set(tuple(str(x) for x in a.items()[0][0:2]) 
                    for a in module.params['attributes'] if type(a) is dict)
    attrnames = set(str(a) 
                    for a in module.params['attributes'] if type(a) is not dict)

    modify_action = module.params['modify_action']

    if modify_action != 'delete' and attrnames:
        module.fail_json(msg='except when deleting, all attributes must be given as name: value pairs.')

    previous = _get_entry(module, cmdparams, entry_dn, 
                          search_base, search_filter, strip_braces)

    if search_base and search_filter and previous: 
        # entry dn may be changed from default if we have searched for the entry
        entry_dn = [value for key, value in previous if key == "dn"][0]

    changed = False
    msg = ''

    if state == 'present':

        if previous is None:
            changed = True
            if not module.check_mode:
                if modify_action == 'delete':
                    attrpairs = set()
                _add_entry(module, cmdparams, entry_dn, attrpairs)
        else:

            if modify_action == 'delete':
                attrpairs &= previous
                attrnames &= set(n for n, v in previous)
            elif modify_action == 'add':
                attrpairs -= previous
            elif modify_action == 'replace':
                tmpattrpairs = attrpairs - previous
                tmpattrnames = set(n for n, v in tmpattrpairs)
                attrpairs = set(a for a in attrpairs if a[0] in tmpattrnames)
            else:
                module.fail_json(msg='unknown modify action: ' + modify_action)

            if attrpairs or attrnames:
                changed = True
                if not module.check_mode:
                    _modify_entry(module, cmdparams, 
                                  entry_dn, attrpairs, attrnames, modify_action)

    elif state == 'absent':
        if previous is not None:
            changed = True
            if not module.check_mode:
                _delete_entry(module, cmdparams, entry_dn)

    current = module.jsonify([tuple(a) for a in 
                              _get_entry(module, cmdparams, entry_dn, 
                                         search_base, search_filter, 
                                         strip_braces)])
    module.exit_json(changed=changed, msg=msg, current=current)

# import module snippets
from ansible.module_utils.basic import *

main()
