#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Ansible module to configure ldap.
(c) 2014, Mark Stillwell <marklee@fortawesome.org>

This file is part of Ansible

Ansible is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Ansible is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
"""

DOCUMENTATION = '''
---
module: ldap
short_description: look up, add, update, or delete an ldap entry
description:
     - use this module to look up, add, update, or delete an ldap entry
version_added: "1.6"
notes:
    - This module requires the command line ldap utilities.
options:
  name:
   ldap_uri:
      - uri for ldap server
    required: false
    default: ldapi:///
    aliases: []
  bind_dn:
    description:
      - dn to use to bind to ldap server
    required: false
    default: null
    aliases: []
  bind_password:
    description:
      - password to use to bind
    required: false
    default: null
    aliases: []
  entry_dn:
    description:
      - entry distinguished name
    required: true
    default: null
    aliases: []
  add_attributes:
    description:
      - list of dictionaries giving key-value pairs representing attributes to
        add
    required: false
    default: []
    aliases: []
  replace_attributes:
    description:
      - list of dictionaries giving key-value pairs representing attributes to
        replace
    required: false
    default: []
    aliases: []
  delete_attributes:
    description:
      - list of strings giving key names or dictionaries giving key-value pairs 
        representing attributes to delete
    required: false
    default: []
    aliases: []
  state:
    description:
      - desired state of ldap entry
    required: false
    default: 'present'
    choices: [ 'present', 'absent' ]
    aliases: []
author: Mark Stillwell

'''

EXAMPLES = '''
'''

from itertools import chain

def _get_entry(module, cmdparams, entry_dn):
    ''' get entry from ldap and return a dictionary '''

    cmd = [module.get_bin_path('ldapsearch', True)] + cmdparams
    cmd += ['-LLL', '-o', 'ldif-wrap=no']
    cmd += ['-b', entry_dn]

    rc, out, err = module.run_command(cmd)

    # not found
    if rc == 32:
        return None

    if rc != 0:
        module.fail_json(msg=err)

    return set(tuple(x.strip() for x in line.split(':', 1)) 
               for line in out.splitlines() if line.strip() != "")


def _add_entry(module, cmdparams, entry_dn, attributes):
    ''' add an entry to ldap '''
    import pipes

    ldif = 'dn: {}\n'.format(entry_dn)

    ldif += '\n'.join('{}: {}'.format(*a) for a in attributes)

    cmd = ' '.join(["echo", pipes.quote(ldif), "|", 
                   module.get_bin_path('ldapadd', True)] + cmdparams)

    rc, out, err = module.run_command(cmd, use_unsafe_shell=True)

    if rc != 0:
        module.fail_json(msg=err)

    return


def _modify_entry(module, cmdparams, entry_dn, add_attrpairs, replace_attrpairs, 
                  delete_attrpairs, delete_attrnames):
    ''' update an entry in ldap '''
    import pipes

    ldif = 'dn: {}\nchangetype: modify\n'.format(entry_dn)

    data = []
    data += ["add: {0}\n{0}: {1}".format(*a) for a in add_attrpairs]
    data += ["replace: {0}\n{0}: {1}".format(*a) for a in replace_attrpairs]
    data += ["delete: {0}\n{0}: {1}".format(*a) for a in delete_attrpairs]
    data += ["delete: {}".format(a) for a in delete_attrnames]

    ldif += '\n-\n'.join(data)

    cmd = ' '.join(["echo", pipes.quote(ldif), "|", 
                   module.get_bin_path('ldapmodify', True)] + cmdparams)

    rc, out, err = module.run_command(cmd, use_unsafe_shell=True)

    if rc != 0:
        module.fail_json(msg=err)

    return


def _delete_entry(module, cmdparams, entry_dn):
    ''' delete an entry in ldap and return empty '''
    cmd = [module.get_bin_path('ldapdelete', True)] + cmdparams
    cmd += [entry_dn]

    rc, out, err = module.run_command(cmd)

    return 


def main():
    ''' main function '''

    module = AnsibleModule(
        argument_spec = dict(
            ldap_uri = dict(type='str', default='ldapi:///'),
            bind_dn = dict(type='str'),
            bind_password = dict(type='str'),
            entry_dn = dict(required=True, type='str'),
            add_attributes = dict(type='list', default=[]),
            replace_attributes = dict(type='list', default=[]),
            delete_attributes = dict(type='list', default=[]),
            state = dict(type='str', choices=['present', 'absent'], 
                         default='present')
        ),
        supports_check_mode=True,
    )

    ldap_uri = module.params['ldap_uri']
    bind_dn = module.params['bind_dn']
    bind_password = module.params['bind_password']

    cmdparams = ['-H', ldap_uri]

    if bind_dn is not None:
        cmdparams += ['-D', bind_dn]

    if bind_password is not None:
        cmdparams += ['-w', bind_password]
    elif ldap_uri == "ldapi:///" :
        cmdparams += ['-QY', 'EXTERNAL']

    entry_dn = module.params['entry_dn']
    state = module.params['state']

    previous = _get_entry(module, cmdparams, entry_dn)

    changed = False
    msg = ''

    if state == 'present':

        add_attrpairs = set(tuple(str(x) for x in a.items()[0])
                            for a in module.params['add_attributes'] 
                            if type(a) is dict)
        replace_attrpairs = set(tuple(str(x) for x in a.items()[0])
                                for a in module.params['replace_attributes'] 
                                if type(a) is dict)

        if previous is None:
            changed = True
            if not module.check_mode:
                _add_entry(module, cmdparams, entry_dn, 
                           add_attrpairs | replace_attrpairs)
        else:

            delete_attrpairs = set(tuple(str(x) for x in a.items()[0])
                                   for a in module.params['delete_attributes'] 
                                   if type(a) is dict)
            delete_attrnames = set(a for a in module.params['delete_attributes'] 
                                   if type(a) is not dict)

            tmpadd_attrpairs = add_attrpairs - previous
            tmpreplace_attrpairs = replace_attrpairs - previous
            tmpdelete_attrpairs = delete_attrpairs & previous
            tmpdelete_attrnames = delete_attrnames & set(n for n, v in previous)

            if (tmpadd_attrpairs or tmpreplace_attrpairs 
                or tmpdelete_attrpairs or tmpdelete_attrnames):
                changed = True
                if not module.check_mode:
                    _modify_entry(module, cmdparams, entry_dn, 
                                  tmpadd_attrpairs, tmpreplace_attrpairs, 
                                  tmpdelete_attrpairs, tmpdelete_attrnames)

    elif state == 'absent':
        if previous is not None:
            changed = True
            if not module.check_mode:
                _delete_entry(module, cmdparams, entry_dn)

    else:
        module.fail_json(msg='illegal state')

    current = str(sorted(_get_entry(module, cmdparams, entry_dn)))
    module.exit_json(changed=changed, msg=msg, current=current)

# import module snippets
from ansible.module_utils.basic import *

main()
